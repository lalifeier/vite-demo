import { useEventListener } from '@vueuse/core'
import { computed, CSSProperties, defineComponent, nextTick, onMounted, reactive, ref, unref } from 'vue'
import './index.scss'

const props = {
  data: {
    type: Array,
    default: () => [],
  },
  itemSize: {
    type: Number,
    default: 200,
  },
  bufferSize: {
    type: Number,
    default: 5,
  },
}

function convertToUnit(str: string | number | null | undefined, unit = 'px'): string | undefined {
  if (str == null || str === '') {
    return undefined
  } else if (isNaN(+str!)) {
    return String(str)
  } else {
    return `${Number(str)}${unit}`
  }
}

export default defineComponent({
  name: 'VirtualList',
  props,
  setup(props) {
    const elRef = ref<HTMLDivElement>()

    const state: any = reactive({
      startOffset: 0,
      startIndex: 0,
      endIndex: 0,
    })

    const visibleCount = computed(() => {
      const el = unref(elRef)
      if (!el) {
        return 0
      }
      return Math.ceil(el.clientHeight / props.itemSize) + props.bufferSize
    })

    const visibleData = computed(() => props.data.slice(state.startIndex, Math.min(state.endIndex, props.data.length)))

    onMounted(() => {
      nextTick(() => {
        const el = unref(elRef)
        console.log(el)

        if (!el) {
          return
        }
        useEventListener(el, 'scroll', onScroll)
        updateVisibleData()
      })
    })

    function onScroll(_event) {
      const el = unref(elRef)
      if (!el) {
        return
      }
      const scrollTop = el.scrollTop
      updateVisibleData(scrollTop)
    }

    function updateVisibleData(scrollTop = 0) {
      state.startIndex = Math.floor(scrollTop / props.itemSize)
      state.endIndex = state.startIndex + visibleCount.value
      state.startOffset = state.startIndex * props.itemSize
    }

    const getInfiniteListPhantomStyle = computed((): CSSProperties => {
      return {
        height: convertToUnit(props.data.length * props.itemSize),
      }
    })

    const getInfiniteListStyle = computed((): CSSProperties => {
      return {
        transform: `translate3d(0,${state.startOffset}px,0)`,
      }
    })

    const getInfiniteListItemStyle = computed((): CSSProperties => {
      return {
        height: convertToUnit(props.itemSize),
        lineHeight: convertToUnit(props.itemSize),
      }
    })

    return () => {
      ;<div ref={elRef} class="infinite-list-container">
        <div class="infinite-list-phantom" style={unref(getInfiniteListPhantomStyle)}></div>
        <div class="infinite-list" style={unref(getInfiniteListStyle)}></div>
        {unref(visibleData).map((item, index) => {
          ;<div class="infinite-list-item" style={unref(getInfiniteListItemStyle)} key={index}>
            {{ item }}
          </div>
        })}
      </div>
    }
  },
})
