worker_processes 16;

events {
  use epoll;
  worker_connections 10240;
}

http {
  include mime.types;
  default_type application/octet-stream;
  sendfile on;
  keepalive_timeout 65;

  # 不发送Nginx版本号
  server_tokens off;

  # 不允许浏览器在frame或iframe中显示页面
  add_header X-Frame-Options SAMEORIGIN;

  # 禁用某些浏览器的 content-type 探测
  add_header X-Content-Type-Options nosniff;

  # 启用大部分现代浏览器内置的 the Cross-site scripting (XSS) 过滤
  add_header X-XSS-Protection "1; mode=block";

  # 启用 Content Security Policy (CSP)
  # add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
  '$status $body_bytes_sent "$http_referer" '
  '"$http_user_agent" "$http_x_forwarded_for"';

  access_log logs/access.log main;

  # 开启gzip
  gzip on;
  gzip_min_length 1k;
  gzip_comp_level 9;
  gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;
  gzip_vary on;
  gzip_disable "MSIE [1-6]\.";


  # upstream backend {
  #   server 127.0.0.1:8081 weight=1;
  #   server 127.0.0.1:8082 weight=2;
  #   server 127.0.0.1:8083 weight=3;
  # }
  proxy_cache_path /tmp/nginx/proxy_cache levels=1:2 keys_zone=cache_zone:10m max_size=50g inactive=7d use_temp_path=off;

  server {
    listen 80;
    server_name localhost;

    root /var/www/app;

    # HTTP 请求转发到 HTTPS
    # if ($scheme != 'https') {
    #     return 301 https://$host$request_uri;
    # }
    location / {
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';

        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
      }
      if ($request_method = 'POST') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
      }
      if ($request_method = 'GET') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
      }


      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # IP访问限制
      # allow 127.0.0.1;
      # deny all;

      # proxy_pass http://backend;
    }

    # 图片防盗链
    # location ~* \.(jpg|jpeg|gif|png|svg|webp)$ {
    #   valid_referers none blocked 127.0.0.1;
    #   if ($invalid_referer) {
    #     return 403;
    #   }
    # }

    location ~* /(.*\.(jpg|jpeg|gif|png|svg|webp))$ {
      add_header X-Pownered "nginx_image_filter";
      add_header X-Cache-Status $upstream_cache_status;

      set $image_path $1;
      set $width -;
      set $height -;
      if ( $arg_width != "" ) {
        set $width $arg_width;
      }
      if ( $arg_height != "" ) {
        set $height $arg_height;
      }

      set $image_uri image-resize/$image_path?width=$width&height=$height;
      proxy_pass http://127.0.0.1:8888/$image_uri;

      proxy_buffering on;
      proxy_cache cache_zone;
      proxy_cache_bypass $http_pragma $http_authorization;
      proxy_cache_key $uri$is_args$args;
      proxy_cache_valid 200 304 301 302 7d;
      proxy_cache_valid 404 1m;
      proxy_cache_valid any 5m;
      proxy_cache_lock on;
      proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
      proxy_cache_revalidate on;
    }

    # 主动清理缓存
    # location /purge(/.*) {
    #   allow 127.0.0.0/8;
    #   deny all;
    #   proxy_cache_purge cache_zone $host$1;
    # }
  }

  server {
    listen 8888;
    server_name localhost;
    access_log off;

    root /var/www/app;

    location /image-resize {
      rewrite /(image-resize)/(.*) /$2 break;

      image_filter resize $arg_width $arg_height;
      image_filter_jpeg_quality 75;
      image_filter_buffer 20M;
      image_filter_interlace on;

      allow 127.0.0.0/8;
      deny all;
    }

    location /image-crop {
      rewrite /(image-crop)/(.*) /$2 break;

      image_filter crop $arg_width $arg_height;
      image_filter_jpeg_quality 75;
      image_filter_buffer 20M;
      image_filter_interlace on;

      allow 127.0.0.0/8;
      deny all;
    }
  }


  # include /usr/local/nginx/conf/conf.d/*.conf;
}
